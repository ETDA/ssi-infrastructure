deployment:
  kong:
    enabled: true
  test:
    enabled: false
  daemonset: false

env:
  database: "postgres"
  pg_host : kong-postgresql
  pg_port : 5432
  pg_timeout : 5000
  pg_user : kong
  pg_password : kong
  pg_database : kong
  nginx_worker_processes: "2"
  proxy_access_log: /dev/stdout
  admin_access_log: /dev/stdout
  admin_gui_access_log: /dev/stdout
  portal_api_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  admin_error_log: /dev/stderr
  admin_gui_error_log: /dev/stderr
  portal_api_error_log: /dev/stderr
  prefix: /kong_prefix/

extraLabels: {}

image:
  repository: kong
  tag: "2.5"
  pullPolicy: IfNotPresent

admin:
  enabled: true
  type: NodePort
  annotations: {}
  labels: {}
  http:
    enabled: true
    servicePort: 8001
    containerPort: 8001
    parameters: []

  tls:
    enabled: true
    servicePort: 8444
    containerPort: 8444
    parameters:
    - http2

  ingress:
    enabled: false

status:
  enabled: true
  http:
    enabled: true
    containerPort: 8100
    parameters: []
  tls:
    enabled: false

cluster:
  enabled: false

proxy:
  enabled: true
  type: ClusterIP
  annotations: {}
  labels:
    enable-metrics: "true"
  http:
    enabled: true
    servicePort: 80
    containerPort: 8000
    parameters: []
  tls:
    enabled: true
    servicePort: 443
    containerPort: 8443
    parameters:
    - http2
  stream: {}
  ingress:
    enabled: false

udpProxy:
  enabled: false
  type: LoadBalancer
  annotations: {}
  labels: {}
  stream: {}

plugins: {}

secretVolumes: []

migrations:
  preUpgrade: true
  postUpgrade: true
  annotations:
    sidecar.istio.io/inject: false
  jobAnnotations: {}
  resources: {}
  #   limits:
  #     cpu: 100m
  #     memory: 256Mi
  #   requests:
  #     cpu: 50m
  #     memory: 128Mi

dblessConfig:
  configMap: ""
  config:
    _format_version: "1.1"
    services:

ingressController:
  enabled: true
  image:
    repository: kong/kubernetes-ingress-controller
    tag: "1.3"
    effectiveSemver:
  args: []
  watchNamespaces: []
  env:
    kong_admin_tls_skip_verify: true
  admissionWebhook:
    enabled: false
  ingressClass: kong
  rbac:
    create: true
  serviceAccount:
    create: true
    name:
    annotations: {}
  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  resources: {}
  # resources:
  #   limits:
  #     cpu: 100m
  #     memory: 256Mi
  #   requests:
  #     cpu: 50m
  #     memory: 128Mi

postgresql:
  enabled: true
  postgresqlUsername: kong
  postgresqlDatabase: kong
  postgresqlPassword: kong
  service:
    port: 5432

waitImage:
  enabled: true
  pullPolicy: IfNotPresent

updateStrategy: {}

resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 256Mi
  # requests:
  #  cpu: 100m
  #  memory: 256Mi

readinessProbe:
  httpGet:
    path: "/status"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

livenessProbe:
  httpGet:
    path: "/status"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

  lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "/bin/sleep 15 && kong quit"]

terminationGracePeriodSeconds: 30

tolerations: []

nodeSelector: {}

podAnnotations: {}

podLabels: {}

replicaCount: 1

deploymentAnnotations:
  kuma.io/gateway: enabled
  traffic.sidecar.istio.io/includeInboundPorts: ""

autoscaling:
  enabled: false
  # minReplicas: 1
  # maxReplicas: 2
  targetCPUUtilizationPercentage:
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80

podDisruptionBudget:
  enabled: false
  # maxUnavailable: "50%"
  # minUnavailable: "50%"

podSecurityPolicy:
  enabled: false

priorityClassName: ""

securityContext:
  runAsUser: 1000

containerSecurityContext: {}

serviceMonitor:
  enabled: false

enterprise:
  enabled: false

manager:
  enabled: true
  type: NodePort
  annotations: {}
  labels: {}
  http:
    enabled: true
    servicePort: 8002
    containerPort: 8002
    parameters: []
  tls:
    enabled: true
    servicePort: 8445
    containerPort: 8445
    parameters:
    - http2
  ingress:
    enabled: false

portal:
  enabled: true
  type: NodePort
  annotations: {}
  labels: {}
  http:
    enabled: true
    servicePort: 8003
    containerPort: 8003
    parameters: []
  tls:
    enabled: true
    servicePort: 8446
    containerPort: 8446
    parameters:
    - http2
  ingress:
    enabled: false

portalapi:
  enabled: true
  type: NodePort
  annotations: {}
  labels: {}
  http:
    enabled: true
    servicePort: 8004
    containerPort: 8004
    parameters: []
  tls:
    enabled: true
    servicePort: 8447
    containerPort: 8447
    parameters:
    - http2
  ingress:
    enabled: false

clustertelemetry:
  enabled: false

extraConfigMaps: []

extraSecrets: []